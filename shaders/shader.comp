#version 450

layout (local_size_x_id = 0, local_size_y_id = 1) in; // Local workgroup size.

layout (std140, binding = 0) buffer buf // Image data through a storage buffer.
{
  	vec4 image[];
};

layout (binding = 1) uniform UBO // Image size through uniform buffer.
{
  	int width;
  	int height;
} ubo;

float sphere(vec3 ray, vec3 dir, vec3 center, float radius)
{
	vec3 rc = ray-center;
	float c = dot(rc, rc) - (radius*radius);
	float b = dot(dir, rc);
	float d = b*b - c;
	float t = -b - sqrt(abs(d));
	float st = step(0.0, min(t,d));
	return mix(-1.0, t, st);
}

vec3 background(float t, vec3 rd)
{
	vec3 light = normalize(vec3(sin(t), 0.6, cos(t)));
	float sun = max(0.0, dot(rd, light));
	float sky = max(0.0, dot(rd, vec3(0.0, 1.0, 0.0)));
	float ground = max(0.0, -dot(rd, vec3(0.0, 1.0, 0.0)));
	return 
		(pow(sun, 256.0)+0.2*pow(sun, 2.0))*vec3(2.0, 1.6, 1.0) +
		pow(ground, 0.5)*vec3(0.4, 0.3, 0.2) +
		pow(sky, 1.0)*vec3(0.5, 0.6, 0.7);
}

void main() 
{
  	// In order to fit the work into workgroups, some unnecessary invocations are
  	// launched. We terminate those invocations here.
  	if (gl_GlobalInvocationID.x >= ubo.width || gl_GlobalInvocationID.y >= ubo.height) 
	{ 
		return; 
	}

	float x = float(gl_GlobalInvocationID.x) / float(ubo.width);
	float y = float(gl_GlobalInvocationID.y) / float(ubo.height);
 
	vec2 coord = vec2(x, y);
	vec2 uv = (coord * 2) - 1;

	vec3 ro = vec3(0.0, 0.0, -3.0);
	vec3 rd = normalize(vec3(uv, 1.0));
	vec3 p = vec3(0.0, 0.0, 0.0);
	float t = sphere(ro, rd, p, 1.0);
	vec3 nml = normalize(p - (ro+rd*t));
	rd = reflect(rd, nml);
	vec3 bgCol = background(0.0, rd);
	vec3 col = bgCol * vec3(0.9, 0.8, 1.0);

	vec4 color = vec4(mix(bgCol, col, step(0.0, t)), 1.0);

	image[ubo.width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x] = color; // Put pixel color data into storage buffer.
}
